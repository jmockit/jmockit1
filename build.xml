<!--
  ~ Copyright (c) 2006-2014 RogÃ©rio Liesenfeld
  ~ This file is subject to the terms of the MIT license (see LICENSE.txt).
  -->
<project name="jmockit" basedir="." default="minimalRebuild">
   <property name="JUNIT_JAR" value="lib/junit-dep-4.11.jar"/>
   <property name="TESTNG_JAR" value="lib/testng-6.8.jar"/>

   <taskdef resource="testngtasks" classpath="${TESTNG_JAR}"/>
   <taskdef
      name="jacocoReport" classname="org.jacoco.ant.ReportTask"
      classpath="../../Java/jacoco-0.7.1/lib/jacocoant.jar"/>

   <loadfile property="version" srcFile="version.txt"/>

   <path id="common.classpath">
      <fileset dir="lib" includes="*.jar"/>
   </path>

   <target name="minimalRebuild" depends="buildMain, buildCoverage, createjars"/>
   <target name="fullRebuild" depends="minimalRebuild, createjavadocs, buildSamples"/>

   <!-- Targets for building/compiling the several JMockit components (modules) -->

   <macrodef name="build">
      <attribute name="module"/>
      <attribute name="srcdir" default="src"/>
      <attribute name="outdir" default="classes"/>
      <attribute name="extraclasspathLocation" default=""/>
      <attribute name="extraclasspath" default="none"/>
      <sequential>
         <delete dir="@{module}/@{outdir}" includes="**/*" quiet="true"/>
         <mkdir dir="@{module}/@{outdir}"/>

         <javac
            srcdir="@{module}/@{srcdir}" destdir="@{module}/@{outdir}" includeantruntime="false"
            source="1.6" target="1.6" encoding="UTF-8"
            debug="true" nowarn="true" excludes="**/package-info.java">
            <classpath refid="common.classpath"/>
            <classpath location="main/classes"/>
            <classpath location="@{module}/classes"/>
            <classpath location="@{module}/@{outdir}"/>
            <classpath location="@{extraclasspathLocation}"/>
            <classpath><fileset dir="." includes="@{extraclasspath}"/></classpath>
         </javac>

         <copy todir="@{module}/@{outdir}">
            <fileset dir="@{module}/@{srcdir}" includes="**/*.properties, **/*.css, **/*.js, **/*.png, **/*.zip"/>
         </copy>
      </sequential>
   </macrodef>
   <macrodef name="buildTests">
      <attribute name="module"/>
      <attribute name="extraclasspathLocation" default=""/>
      <attribute name="extraclasspath" default=""/>
      <sequential>
         <build
            module="@{module}" srcdir="test" outdir="test-classes"
            extraclasspathlocation="@{extraclasspathLocation}" extraclasspath="@{extraclasspath}"/>
      </sequential>
   </macrodef>

   <target name="buildMain">
      <build module="main"/><buildTests module="main"/>
   </target>
   <target name="buildCoverage" depends="buildMain">
      <build module="coverage"/><buildTests module="coverage"/>
   </target>

   <macrodef name="buildSample">
      <attribute name="module"/>
      <attribute name="jdkVersion" default="1.7"/>
      <attribute name="outdir" default="classes"/>
      <attribute name="testLibrary" default="${JUNIT_JAR}"/>
      <attribute name="extraclasspathLocation" default=""/>
      <attribute name="extraclasspath" default="none"/>
      <sequential>
         <delete dir="samples/@{module}/@{outdir}" includes="**/*.class" quiet="true"/>
         <mkdir dir="samples/@{module}/@{outdir}"/>
         <javac
            srcdir="samples/@{module}/src" destdir="samples/@{module}/@{outdir}" includeantruntime="false"
            source="@{jdkVersion}" target="@{jdkVersion}" debug="true" nowarn="true" excludes="**/package-info.java">
            <classpath refid="common.classpath"/>
            <classpath>
               <fileset dir="samples/@{module}/lib" includes="*.jar" erroronmissingdir="false"/>
            </classpath>
            <classpath location="@{extraclasspathLocation}"/>
            <classpath><fileset dir="." includes="@{extraclasspath}"/></classpath>
         </javac>

         <delete dir="samples/@{module}/test-classes" includes="**/*.class" quiet="true"/>
         <mkdir dir="samples/@{module}/test-classes"/>
         <javac
            srcdir="samples/@{module}/test" destdir="samples/@{module}/test-classes" includeantruntime="false"
            source="@{jdkVersion}" target="@{jdkVersion}" debug="true" nowarn="true">
            <classpath refid="common.classpath"/>
            <classpath location="jmockit.jar"/>
            <classpath location="@{testLibrary}"/>
            <classpath>
               <fileset dir="samples/@{module}/lib" includes="*.jar" erroronmissingdir="false"/>
            </classpath>
            <classpath location="samples/@{module}/@{outdir}"/>
            <classpath location="@{extraclasspathLocation}"/>
            <classpath><fileset dir="." includes="@{extraclasspath}"/></classpath>
         </javac>
      </sequential>
   </macrodef>

   <target name="buildEasyMock">
      <buildSample module="easymock" jdkVersion="1.6" extraclasspath="samples/lib/easymock*.jar"/>
   </target>
   <target name="buildJMock">
      <buildSample module="jmock" jdkVersion="1.6" extraclasspath="lib/hamcrest-*.jar samples/lib/jmock*.jar"/>
   </target>
   <target name="buildMockito">
      <buildSample
         module="mockito" extraclasspath="lib/hamcrest-*.jar samples/lib/hamcrest-*.jar samples/lib/mockito*.jar"/>
   </target>
   <target name="buildUnitils">
      <buildSample module="unitils" extraclasspath="samples/lib/unitils*.jar"/>
   </target>
   <target name="buildPowerMock">
      <buildSample module="powermock" extraclasspath="lib/*.jar"/>
   </target>
   <target name="buildLoginService">
      <buildSample module="LoginService" testlibrary="${TESTNG_JAR}"/>
   </target>
   <target name="buildTutorial">
      <buildSample module="tutorial"/>
   </target>
   <target name="buildOrderManagement">
      <buildSample module="orderMngmntWebapp"/>
   </target>
   <target name="buildTimingFramework">
      <buildSample module="TimingFramework" extraclasspath="lib/hamcrest-*.jar"/>
   </target>
   <target name="buildAnimatedTransitions">
      <buildSample module="AnimatedTransitions" extraclasspathLocation="samples/TimingFramework/classes"/>
   </target>
   <target name="buildTourDeMock">
      <buildSample
         module="tourdemock"
         extraclasspath="samples/lib/easymock*.jar samples/lib/jmock*.jar samples/lib/mockito*.jar
                         samples/lib/unitils*.jar samples/lib/org.springframework.*.jar"/>
   </target>
   <target name="buildFakingXMocking">
      <buildSample module="fakingXmocking" jdkVersion="1.8" extraclasspath="samples/lib/mockito*.jar"/>
   </target>

   <target
      name="buildSamples"
      depends="buildEasyMock, buildJMock, buildMockito, buildUnitils, buildPowerMock, buildLoginService,
               buildTutorial, buildOrderManagement, buildTimingFramework, buildAnimatedTransitions, buildTourDeMock"/>

   <!-- Target for generating the Javadoc HTML documentation -->

   <target name="createjavadocs">
      <property name="api" value="../jmockit.github.io/api1x"/>
      <delete dir="${api}" includes="**/*.html" excludes="overview.html" quiet="true"/>
      <javadoc
         destdir="${api}" overview="${api}/overview.html"
         classpathref="common.classpath" classpath="main/classes"
         nodeprecated="false" noindex="true" notree="true" nohelp="true" breakiterator="yes"
         windowtitle="JMockit Toolkit API" doctitle="JMockit Toolkit API Documentation"
         encoding="UTF-8" charset="UTF-8" locale="en">
         <arg line="-notimestamp -quiet -Xdoclint:none"/>
         <fileset dir="${basedir}/main/src">
            <include name="mockit/*.java"/>
            <include name="mockit/integration/junit4/*.java"/>
            <include name="mockit/integration/testng/*.java"/>
         </fileset>
         <link href="http://download.oracle.com/javase/7/docs/api" offline="true" packagelistloc="${api}/external"/>
         <header><![CDATA[<a href="http://jmockit.org" target="_top"><img src="resources/logo.png">JMockit Home</a>]]></header>
         <footer><![CDATA[<a href="http://jmockit.org" target="_top"><img src="resources/logo.png">JMockit Home</a>]]></footer>
      </javadoc>
      <delete file="${api}/constant-values.html"/>
      <replace dir="${api}" includes="*.html">
         <replacetoken><![CDATA[</head>]]></replacetoken>
         <replacevalue><![CDATA[<link rel="shortcut icon" type="image/x-icon" href="resources/favicon.ico">
</head>]]></replacevalue>
      </replace>
      <replace dir="${api}/mockit" includes="*.html">
         <replacetoken><![CDATA[</head>]]></replacetoken>
         <replacevalue><![CDATA[<link rel="shortcut icon" type="image/x-icon" href="../resources/favicon.ico">
</head>]]></replacevalue>
      </replace>
      <replace dir="${api}/mockit/integration" includes="*/*.html">
         <replacetoken><![CDATA[</head>]]></replacetoken>
         <replacevalue><![CDATA[<link rel="shortcut icon" type="image/x-icon" href="../../../resources/favicon.ico">
</head>]]></replacevalue>
      </replace>
   </target>

   <!-- Targets for generating component jars and the distribution zip file -->

   <target name="createjars" depends="createjar-main, createjar-coverage"/>

   <target name="createjar-main">
      <delete file="jmockit.jar"/>
      <jar destfile="jmockit.jar">
         <fileset file="LICENSE.txt"/>
         <fileset file="NOTICE.txt"/>
         <fileset dir="main/src" includes="mockit/**/*.java **/attach/**/*.java org/junit/**/*.java"/>
         <fileset dir="main/classes" includes="mockit/**/*.class **/attach/**/*.class org/junit/**/*.class"/>
         <manifest>
            <attribute name="Premain-Class" value="mockit.internal.startup.Startup"/>
            <attribute name="Agent-Class" value="mockit.internal.startup.Startup"/>
            <attribute name="Can-Redefine-Classes" value="true"/>
            <attribute name="Can-Retransform-Classes" value="true"/>
            <attribute name="Implementation-Version" value="${version}"/>
         </manifest>
         <service type="org.testng.ITestNGListener" provider="mockit.integration.testng.Initializer"/>
      </jar>
   </target>

   <target name="createjar-coverage">
      <delete file="jmockit-coverage.jar"/>
      <jar destfile="jmockit-coverage.jar">
         <fileset file="LICENSE.txt"/>
         <fileset file="NOTICE.txt"/>
         <fileset dir="coverage/src" includes="mockit/coverage/**/*.java"/>
         <fileset
            dir="coverage/classes" includes="jmockit.properties mockit/coverage/**/*.class **/*.css **/*.js **/*.png"/>
         <fileset dir="main/classes">
            <include name="mockit/external/asm4/*.class"/>
            <include name="mockit/internal/util/StackTrace.class"/>
            <include name="mockit/internal/state/TestRun.class"/>
            <include name="mockit/internal/state/MockFixture.class"/>
            <include name="mockit/internal/startup/Startup.class"/>
         </fileset>
         <manifest>
            <attribute name="Main-Class" value="mockit.coverage.CodeCoverage"/>
            <attribute name="Premain-Class" value="mockit.coverage.standalone.Startup"/>
            <attribute name="Can-Redefine-Classes" value="true"/>
            <attribute name="Can-Retransform-Classes" value="true"/>
            <attribute name="Implementation-Version" value="${version}"/>
         </manifest>
      </jar>
   </target>

   <target name="createzip">
      <zip
         destfile="../artifacts1x/jmockit-${version}.zip"
         basedir=".." includes="jmockit1.org/**, jmockit.github.io/**"
         excludes="jmockit1.org/**/*.i*, jmockit.github.io/*.i*,
                   jmockit1.org/*.zip, jmockit1.org/**/*.ser, jmockit1.org/**/lib/**, jmockit1.org/build.xml,
                   jmockit1.org/**/target/**, jmockit1.org/**/classes/**, jmockit1.org/**/test-classes/**,
                   jmockit1.org/**/test-output/**, jmockit1.org/samples/javax.inject-tck/**,
                   jmockit1.org/**/coverage-report/**, jmockit1.org/**/jacoco.exec, jmockit1.org/**/*.html"
         encoding="UTF-8"/>
   </target>

   <!-- Targets for running tests and generating corresponding test reports in HTML -->
   
   <macrodef name="testReport">
      <attribute name="name"/>
      <sequential>
         <junitreport>
           <fileset dir="." includes="TEST-*.xml"/>
           <report format="noframes" styledir="${ant.home}/etc"/>
         </junitreport>
         <delete dir="." includes="TEST*-*.xml" quiet="true"/>
         <move file="junit-noframes.html" tofile="@{name}.html"/>
      </sequential>
   </macrodef>

   <target name="tests">
      <junit fork="yes" forkmode="once" dir="main">
         <assertions><enable/></assertions>
         <jvmarg value="-javaagent:../jmockit.jar"/>
         <classpath refid="common.classpath"/>
         <classpath location="main/test-classes"/>
         <classpath location="main/classes"/>
         <batchtest>
            <fileset dir="main/test-classes">
               <include name="**/*Test.class"/>
               <exclude name="**/*CodeUnderTest.class"/>
               <exclude name="**/Base*Test.class"/>
               <exclude name="mockit/integration/testng/*Test.class"/>
               <exclude name="**/MockStateBetweenTestMethodsNGTest.class"/>
               <exclude name="**/ExecutingTest.class"/>
            </fileset>
         </batchtest>
         <formatter type="xml"/>
      </junit>
      <testReport name="main/JMockitTests"/>

      <testng workingdir="main">
         <classpath refid="common.classpath"/>
         <classpath path="jmockit.jar"/>
         <classpath>
            <pathelement location="main/test-classes"/>
         </classpath>
         <classfileset
            dir="main/test-classes"
            includes="mockit/integration/testng/*Test.class"
            excludes="mockit/integration/testng/BaseTestNGDecoratorTest.class
                      mockit/integration/testng/TestNGViolatedExpectationsTest.class"/>
      </testng>
   </target>

   <target name="sampleTests">
      <junit fork="yes" forkmode="once" dir="samples" showoutput="true" printsummary="true">
         <assertions><enable/></assertions>
         <classpath path="jmockit.jar"/>
         <classpath path="jmockit-coverage.jar"/>
         <sysproperty key="coverage-output" value="serial"/>
         <classpath refid="common.classpath"/>
         <classpath>
            <fileset dir="samples" includes="**/lib/*.jar"/>
            <dirset dir="samples">
               <include name="*/classes"/>
               <include name="*/test-classes"/>
            </dirset>
         </classpath>
         <batchtest>
            <fileset dir="samples/easymock/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/jmock/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/mockito/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/unitils/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/powermock/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/orderMngmntWebapp/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/tutorial/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/TimingFramework/test-classes" includes="**/*Test.class" excludes="end2end/*"/>
            <fileset dir="samples/AnimatedTransitions/test-classes" includes="**/*Test.class"/>
            <fileset dir="samples/tourdemock/test-classes" includes="**/*Test.class"/>
         </batchtest>
         <formatter type="xml"/>
      </junit>
      <testReport name="samples/JMockitSampleTests"/>

      <property name="sampleDir" value="samples/LoginService"/>
      <testng workingdir="${sampleDir}">
         <classpath refid="common.classpath"/>
         <classpath path="jmockit.jar"/>
         <classpath path="jmockit-coverage.jar"/>
         <sysproperty key="coverage-output" value="serial"/>
         <classpath>
            <fileset dir="samples" includes="lib/*.jar"/>
            <pathelement location="${sampleDir}/classes"/>
            <pathelement location="${sampleDir}/test-classes"/>
         </classpath>
         <classfileset dir="${sampleDir}/test-classes" includes="**/*Test.class"/>
      </testng>

      <java fork="yes" dir="samples" jar="jmockit-coverage.jar">
         <arg line="-Djmockit-coverage-output=html . LoginService"/>
      </java>
      <delete file="samples/coverage.ser"/>
      <delete file="samples/LoginService/coverage.ser"/>
   </target>

   <target name="jacoco-report">
      <property name="moduleDir" value="samples/mockito"/>
      <jacocoReport>
         <executiondata>
            <file file="${moduleDir}/jacoco.exec"/>
         </executiondata>
         <structure name="JaCoCo Ant Example">
            <classfiles>
               <fileset dir="${moduleDir}/classes"/>
            </classfiles>
            <sourcefiles encoding="UTF-8">
               <fileset dir="${moduleDir}/src"/>
            </sourcefiles>
         </structure>
         <html destdir="${moduleDir}/jacoco-report"/>
      </jacocoReport>
      <delete file="${moduleDir}/jacoco.exec"/>
   </target>
</project>
